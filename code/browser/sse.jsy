import {debounce} from '../utils.jsy'

export const sse_reload_key = '@@sse-reload'
export const sse_reload_evt_rebind = '@@sse-reload rebind'
export const sse_reload_evt_connection = '@@sse-reload connection'
export const sse_reload_evt_update = '@@sse-reload update'
export const sse_reload_evt_errors = '@@sse-reload errors'
export const sse_reload_evt_shutdown = '@@sse-reload shutdown'


export default connectReloadEventSource
export function connectReloadEventSource(url) ::
  if ! url :: url = 'http://127.0.0.1:35810'

  const tsid = Date.now().toString(36)
  let update_count = 0

  const es = new EventSource(url)
  Object.assign @ es, @{}
    onopen() ::
      const evt = new Event @ sse_reload_evt_connection
      if window.dispatchEvent(evt) ::
        console.warn @ `SSE reload ready (${tsid})`

    onerror(err) ::
      const evt = new Event @ sse_reload_evt_connection
      evt.error = err
      if window.dispatchEvent(evt) ::
        console.warn @ `SSE reload NOT ready (${tsid})`

    onmessage({data}) ::
      let detail
      try ::
        detail = JSON.parse @ data
      catch err ::
        return console.error @ `SSE reload JSON error (${tsid})`, err

      detail.tsid = tsid
      detail.count = update_count++
      dispatch_update(detail)


  ::
    const prev_shutdown = window[sse_reload_key]
    window[sse_reload_key] = shutdown

    if null != prev_shutdown ::
      prev_shutdown()

    window.dispatchEvent @
      new Event(sse_reload_evt_rebind)

  return shutdown


  function shutdown() ::
    es.close()
    window.dispatchEvent @
      new Event(sse_reload_evt_shutdown)


  function dispatch_update(detail) ::
    const {updates, errors, tsid, count} = detail
    const has_errors = errors && 0 !== errors.length
    const grp_msg = has_errors
      ? `SSE reload (${tsid}:${count}) with ${errors.length} errors`
      : Array.isArray(updates)
        ? `SSE reload (${tsid}:${count}) with ${updates.length} updates`
        : `SSE reload (${tsid}:${count}) notice`

    if has_errors ::
      console.group(grp_msg)
    else console.groupCollapsed(grp_msg)

    try ::
      const evt_err = new CustomEvent @ sse_reload_evt_errors, @{} detail: errors
      if window.dispatchEvent(evt_err) ::
        if has_errors ::
          for const [err_key, err_msg] of errors ::
            console.error @ 'Build Error:', err_msg

      const evt = new CustomEvent @ sse_reload_evt_update, @{} detail
      if window.dispatchEvent(evt) ::
        if updates ::
          console.log @ 'Build Updates:', updates

    catch err ::
      console.error(err)
    finally ::
      console.groupEnd(grp_msg)


export function onSSEReloadUpdate({ms_reload, preventDefault, on_reload}) ::
  const do_reload = debounce @ ms_reload || 150, on_reload

  window.addEventListener @ sse_reload_evt_update, _on_reload_, false
  return () => ::
    window.removeEventListener @ sse_reload_evt_update, _on_reload_, false

  function _on_reload_(evt) ::
    if preventDefault && null != evt ::
      evt.preventDefault()

    const {count, updates, mapping} = evt.detail || {}
    if 0 === count :: return
    if null == updates || 0 === updates.length :: return

    do_reload(evt.detail)


export function onSSEReloadErrors({on_show, on_clear, on_update, on_start, on_stop, autoStart}) ::
  window.addEventListener @ sse_reload_evt_errors, _on_update_, false
  window.addEventListener @ sse_reload_evt_rebind, on_start, false
  window.addEventListener @ sse_reload_evt_shutdown, on_stop, false

  if autoStart :: on_start()
  return () => ::
    window.removeEventListener @ sse_reload_evt_errors, _on_update_, false
    window.removeEventListener @ sse_reload_evt_rebind, on_start, false
    window.removeEventListener @ sse_reload_evt_shutdown, on_stop, false

  function _on_update_(evt) ::
    const errorList = evt.detail || []
    if 0 === errorList.length ::
      if null !== on_clear ::
        on_clear(evt)
    else ::
      if null !== on_show ::
        on_show(errorList, evt)

    if null != on_update ::
      on_update(evt)
