const path = require('path')

export default build_events

export function build_events({contentBase, skip, ms_update, onBuildUpdate}={}) ::
  if 'function' !== typeof onBuildUpdate ::
    throw new TypeError('Expected onBuildUpdate to be a function')

  if null == skip :: skip = fn => fn.startsWith('chunk-')

  const mapping = Object.create(null)
  const errors = Object.create(null)
  let lastMapping = {}

  const innerBuildUpdate = debounce @ ms_update || 250, () => ::
    const updates = [], curMapping = {}
    for const e of Object.entries(mapping) ::
      curMapping[e[0]] = e[1]
      if e[1] !== lastMapping[e[0]] ::
        updates.push(e)

    lastMapping = curMapping
    onBuildUpdate @: updates, mapping,
      errors: Object.entries(errors)

  function sendBuildUpdate(updates, mergeUpdates) ::
    if true === mergeUpdates ::
      if Array.isArray(updates) ::
        for const [k, v] of updates ::
          mapping[k] = v
      else Object.assign @ mapping, updates

    innerBuildUpdate()


  return @{}
    name: 'build-events',
    sendBuildUpdate

    options(inputOptions) ::
      const idx = inputOptions.plugins.indexOf(this)
      if -1 !== idx ::
        inputOptions.plugins[idx] =
          this._cloneWithErrorKey(inputOptions.input)
      return inputOptions

    _cloneWithErrorKey(errorKey) ::
      return @{}
        __proto__: this,
        buildEnd(err) ::
          if null != err ::
            const err_entry = errors[errorKey] = @{} err,
              message: err.message, stack: err.stack

            err_entry.output = formatError(err, err_entry)

          else if null != errors[errorKey] ::
            delete errors[errorKey]
          else return ;

          sendBuildUpdate(null)

    async generateBundle(outputOpts, bundle, isWrite) ::
      if (!isWrite) return

      const outDir = outputOpts.dir || path.dirname(outputOpts.file)
      if null == contentBase ::
        contentBase = outDir.split(path.sep, 1)[0]

      const outRoot = path.relative(contentBase, outDir)

      const updates = []
      for (const [outputFileName, bndl] of Object.entries(bundle)) ::
        if skip @ outputFileName, bndl :: continue

        const key = path.join(outRoot, outputFileName)
        const ts = mapping[key] = @{} value: key, ts: Date.now().toString(36)
        updates.push @# key, ts

      if 0 !== updates.length ::
        sendBuildUpdate(updates)


function formatError(err, err_entry) ::
  let res = '', frame_detail = ''
  if err.frame ::
    frame_detail += err + '\n\n'

    frame_detail += err.frame
    frame_detail += '\n\n'

    const loc = err.loc
    if loc && loc.file ::
      frame_detail += `in "${loc.file}" at line ${loc.line}:${loc.column}\n\n`

    res += frame_detail
    err_entry.frame_detail = frame_detail

  if err.stack ::
    res += err.stack
  else res += err

  res += '\n'
  return res


function debounce(ms, inner) ::
  let tid
  return () => @
    tid = clearTimeout(tid),
    tid = setTimeout(inner, ms)

